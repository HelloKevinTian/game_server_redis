/**
 * Redis连接管理
 *
 * @author <a href="wangyi@chukong-inc.com">Shao</a>
 * @version 0.0.1
 * @date 2013.06.05
 */
var fs = require('fs');
var redis = require('redis');
var gpool = require('generic-pool');

/* 
 * 配置模版:
 * {
 *    "name": "cache",
 *    "host" : "192.168.1.71",
 *    "port" : 20999,
 *    "max" : 100,
 *    "idleTimeoutMillis" : 30000,
 *    "log" : false
 * }
 */

//存放当前已经初始化的Redis连接池对象映射 { name : poolob }
var pools = {};

/**
 * 创建Redis连接
 * @param {String} config 配置参数
 */
function createRedis(config) {
    if (!config) {
        console.debug('createRedis config is NULL');
        return;
    }
    // 如果为文件路径. 加载文件
    if (typeof config === 'string') {
        config = JSON.parse(fs.readFileSync(config, "utf8"));
    }
    if (config.proxy) {
        var opts = {
            'no_ready_check': config.proxy
        };
        var client = redis.createClient(config.port, config.host, opts);
        client.on('error', function(err) {
            console.error('连接Redis出现错误: %s', err.stack);
        });
        pools[config.name] = {};
        pools[config.name].client = client;
        pools[config.name].proxy = true;
    } else {
        var _pool = gpool.Pool({
            name: config.name,
            dbIndex: 0,
            create: function(cb) {
                var client = redis.createClient(config.port, config.host);
                client.on('error', function(err) {
                    console.error('连接Redis出现错误: %s', err.stack);
                });
                cb(null, client);
            },
            destroy: function(client) {
                client.quit();
            },
            max: 1000,
            idleTimeoutMillis: 30000,
            log: false
        });
        pools[config.name] = {};
        pools[config.name].client = _pool;
        pools[config.name].proxy = false;
    }

};

/**
 * 获取redis对象
 * @param {String} name 数据库名字
 * @param {Function} execb 回调函数, 获取对象后执行回调
 */
function execute(name, execb) {
    var pool = pools[name];
    if (!pool) {
        execb(null);
        console.error('获取redis连接[ %s ]未找到连接池对象!', name);
        return;
    }
    if (pool.proxy) {
        execb(pool.client, function() {});
    } else {
        // 连接池中获取对象
        pool.client.acquire(function(err, client) {
            var release = function() {
                pool.client.release(client);
            };
            if (err) {
                console.error('执行Redis命令时报错: %s', err.stack);
                release();
            } else {
                execb(client, release);
            }
        }, 0);
    }
};

module.exports = {
    'createRedis': createRedis,
    'execute': execute
};