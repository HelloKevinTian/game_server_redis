/**
 * 服务器框架
 *
 * @author <a href='wangyi@chukong-inc.com'>Shao</a>
 * @version 0.0.1
 * @date 2013.06.05
 */
var logger = require('ss-logger').getLogger(__filename);
var Connector = require('./lib/connector.js');
var fs = require('fs');
var util = require('util');

// 框架层默认配置路径
var config = {
    'server': 'config/server.json',
    'handle': 'config/handle.json'
};

// 网络模块对象
var serverAry = {};

/**
 * 配置各个功能模块
 * @param {String} name 功能模块名字
 * @param {String|Function} opts 配置文件路径 或 配置回调函数
 */
function configure(name, opts) {
    if (config[name]) {
        config[name] = opts;
    }
};

/**
 * 开启服务器
 */
function start() {
    // 开启cpu数量的进程.
    var cluster = require('cluster');
    var numCPUs = require('os').cpus().length;
    if (cluster.isMaster) {
        // Fork workers.
        for (var i = 0; i < numCPUs; i++) {
            cluster.fork();
        }

        cluster.on('exit', function(worker, code, signal) {
            console.log('worker ' + worker.process.pid + ' died');
        });
    } else {
        if (typeof config.server === 'string') {
            config.server = JSON.parse(fs.readFileSync(config.server, "utf8"));
        }
        if (typeof config.handle === 'string') {
            config.handle = JSON.parse(fs.readFileSync(config.handle, "utf8"));
        }
        // 创建网络连接
        for (var i in config.server) {
            var name = config.server[i].name;
            // 初始化网络模块
            var server = new Connector();
            server.configure('server', config.server[i]);
            server.configure('handle', config.handle[name]);
            server.start();
            serverAry[name] = server; //serverAry["logic"] = server;
        }
    }
};

/**
 * 关闭服务器
 */
function stop() {
    logger.debug('stop');
};

module.exports = {
    'configure': configure,
    'start': start,
    'stop': stop,
    'server': serverAry
};


process.on('uncaughtException', function(err) {
    if (logger) {
        logger.error('未知异常: %s', err.stack);
    } else {
        console.error('未知异常: ' + err.stack);
    }
    var d = new Date();
    var time = util.format('%d-%d-%d-%d-%d-%d', d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());
    var str = util.format('%s 未知异常: %s\n', time, err.stack);
    if (!fs.existsSync('./logs')) { //不存在就创建一个
        fs.mkdirSync('./logs', 0755)
    }
    fs.appendFile("logs/uncaughtException.log", str);
});