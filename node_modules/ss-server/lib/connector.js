/**
 * 网络模块
 *
 * @author <a href="wangyi@chukong-inc.com">Shao</a>
 * @version 0.0.1
 * @date 2013.06.05
 */
var util = require('util');
var http = require('http');
var https = require('https');
var qs = require('querystring');
var fs = require('fs');
var EventEmitter = require('events').EventEmitter;
var logger = require('ss-logger').getLogger(__filename);
var crypto = require('crypto');

/**
 * 网络连接器
 * @extends EventEmitter
 * @author neil
 */
var Connector = function() {
    EventEmitter.call(this);
    this.host = ''; // 服务器IP
    this.port = 0; // 监听端口
    this.type = 'http'; // 启动服务器类型
    this.server = null; // 服务器实例

    this.handler_url = {}; // 消息包处理对象存放列表 { url : handler }
    this.handlers = {}; // 消息包处理对象存放列表 { msgid : handler }
    this.handleDoc = {}; // 消息包描述对象存放列表 { msgid : description }

    this.handler_get = {}; // get 消息包处理对象存放列表 { url : handler }
    this.handleDoc_get = {}; // get 消息包描述对象存放列表 { url : description }

    this.handler_post = {}; // post 消息包处理对象存放列表 { url : handler }
    this.handleDoc_post = {}; // post 消息包描述对象存放列表 { url : description }
}

util.inherits(Connector, EventEmitter);

/**
 * 配置服务器相关
 *
 * @param {String} type 配置类型: "server" 是服务器配置, "handle"是消息处理配置
 * @param {String} config 配置文件路径
 */
Connector.prototype.configure = function(type, config) {
    // 如果为文件路径. 加载文件
    if (typeof config === 'string') {
        config = JSON.parse(fs.readFileSync(config, "utf8"));
    }
    if (type === 'server') {
        this.name = config.name;
        this.type = config.type;
        this.host = config.host;
        this.port = config.port;
    } else if (type === 'handle') { //加载功能模块
        for (var i in config) {
            this.loadHandler(config[i]);
        }
    }
}

/**
 * 读取协议处理函数
 *
 * @param {Object} opts 一条协议的配置参数
 */
Connector.prototype.loadHandler = function(opts) {
    // 加载处理文件
    var path = util.format('%s/handle/%s', process.cwd(), opts.path);
    var handler = require(path);

    // 默认给all类型
    opts.type = opts.type || "all";

    // 分析处理url
    if (opts.type == 'get') {
        if (this.addHandlerGet(opts, handler)) {
            logger.info('load module success(get)! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, opts.path);
        } else {
            logger.error('load module fail(get)! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
        }
    } else if (opts.type == 'post') {
        if (this.addHandlerPost(opts, handler)) {
            logger.info('load module success(post)! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, opts.path);
        } else {
            logger.error('load module fail(post)! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
        }
    } else if (opts.type == 'all') {
        if (this.addHandlerGet(opts, handler) && this.addHandlerPost(opts, handler)) {
            logger.info('load module success(post + get)! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, opts.path);
        } else {
            logger.error('load module fail(post + get)! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
        }
    } else {
        logger.error('load module fail! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
    }
}

/**
 * 加载get请求相关
 * @param {Object} opts 一条协议的配置参数
 * @param {Object} handler 处理协议回调对象
 */
Connector.prototype.addHandlerGet = function(opts, handler) {
    if (this.handler_get[opts.url]) {
        logger.error('load get module fail! already exsit: [ %s ] url[ %s ]', opts.description, opts.url);
        return false;
    }
    var func = null;
    if (typeof handler.get === 'function') {
        func = handler.get;
    } else if (typeof handler.handle === 'function') {
        func = handler.handle;
    }
    if (func) {
        this.on('get' + opts.url, func);
        this.handler_get[opts.url] = func;
        this.handleDoc_get[opts.url] = opts.description;
        return true;
    }
    return false;
}

/**
 * 加载post请求相关
 * @param {Object} opts 一条协议的配置参数
 * @param {Object} handler 处理协议回调对象
 */
Connector.prototype.addHandlerPost = function(opts, handler) {
    if (this.handler_post[opts.url]) {
        logger.error('load post module fail! already exsit: [ %s ] url[ %s ]', opts.description, opts.url);
        return false;
    }
    var func = null;
    if (typeof handler.post === 'function') {
        func = handler.post;
    } else if (typeof handler.handle === 'function') {
        func = handler.handle;
    }
    if (func) {
        this.on('post' + opts.url, func);
        this.handler_post[opts.url] = func;
        this.handleDoc_post[opts.url] = opts.description;
        return true;
    }
    return false;
}

/**
 * 解析Get请求的数据
 * @return {JSON} 解析Get请求里的参数
 */
function doGetParse(req, res) {
    var str = req.url;
    if (str.indexOf('?') > -1) {
        var arr = String.prototype.split.call(req.url, '?');
        return [arr[0], qs.parse(arr[1])];
    } else {
        return [str, null];
    }
}

/**
 * 解析Post请求的数据(异步)
 */
function doPostParse(req, res, endcb) {
    var chunks = [];
    req.on('data', function(chunk) {
        chunks.push(chunk);
    });

    req.on('end', function() {
        var str = chunks.join('');
        endcb([req.url, qs.parse(str)]);
    });
}

/**
 * 创建 http 服务器
 *
 * @param {String} host 绑定服务器ip
 * @param {Number} port 服务器监听端口
 */
Connector.prototype.createHttpServer = function() {
    var self = this;
    this.server = http.createServer(function(req, res) {
        //处理完请求的回调（to client here！！）
        var endcb = function(body) {
            if (!body) {
                body = {
                    code: 200,
                    status: "success"
                };
            }
            res.end(JSON.stringify(body) + '\n', 'utf8');
            logger.info('<<< message s2c: [ %s ]', JSON.stringify(body));
        };

        var clientip = req.connection.remoteAddress;
        if (req.url !== '/favicon.ico') {
            logger.info('>>> message c2s [%s] [%s]: %s', clientip, req.method, req.url);
        }
        switch (req.method) {
            case 'GET':
                {
                    var args = doGetParse(req, res);
                    args && self.httpMessage(clientip, args[0], args[1], endcb, req, res, 'get');
                }
                break;
            case 'POST':
                {
                    doPostParse(req, res, function(args) {
                        args && self.httpMessage(clientip, args[0], args[1], endcb, req, res, 'post');
                    });
                }
                break;
            default:
                res.end();
                break;
        }
    });

    this.server.listen(this.port);
    logger.info('game_server is running: host = [%s] port = [%d]', this.host, this.port);
}

/**
 * 数据协议解析
 *
 * @param {String} clientip 客户端ip
 * @param {String} urlpath url路径
 * @param {Object} args 数据包
 * @param {Function} endcb 结束回调函数
 */
Connector.prototype.httpMessage = function(clientip, urlpath, data, endcb, req, res, type) {

    //******************特殊处理的路由放在这里******************
    if (urlpath === '/favicon.ico') {
        //浏览器默认间隔性的请求网页ico,需过滤掉
        return;
    } else if (urlpath === '/status') {
        var text = util.format('[ %s-Server ]test connect succeed!', this.name);
        endcb({
            code: 200,
            result: text
        });
        return;
    }
    //***********************************************************

    try {
        if (!data) {
            data = {};
        }
        data.urlpath = urlpath;
        //TODO 客户端数据验证在这里写！！！
        if (this['handler_' + type][urlpath]) {
            logger.info('[ %s-Server ]@@@ module is triggered: urlpath:[ %s ] [ %s ] data:[ %s ] type:[ %s ]', this.name, urlpath, this['handleDoc_' + type][urlpath], JSON.stringify(data), type);
            this.emit(type + urlpath, clientip, data, endcb, req, res);
        } else {
            logger.warn('[ %s-Server ]### Error:received undefined request! urlpath:[ %s ] data:[ %s ] type:[ %s ]', this.name, urlpath, JSON.stringify(data), type);
            endcb();
        }
    } catch (e) {
        logger.error("try parseMessage %s", e);
        endcb();
    }
}

/**
 * 客户端md5认证
 * 客户端发来的数据中包含用公钥keymd5后串和auth_key，服务器收到后用auth_key和key组合重新md5，再和发来的MD5串作比较 
 */
Connector.prototype.auth_client = function(data) {
    if (data === null) {
        return false;
    }
    var msg = data.msg;
    var client_str = data.token;
    if (msg === null || client_str === null) {
        return false;
    }
    var md5key = '_ck_fatalrace_20150202'; //private key!!_ck_fatalrace_20150202
    var md5str = JSON.stringify(msg) + md5key;

    var md5sum = crypto.createHash('md5');
    md5sum.update(md5str,'utf8');
    var server_str = md5sum.digest('hex');

    logger.info("server_str: " + server_str + " ### client_str: " + client_str);
    if (server_str !== client_str) {
        logger.info("verify fail!!!");
        return false;
    }
    logger.info("verify ok!!!");
    return true;
}

/**
 * 开启服务器
 */
Connector.prototype.start = function() {
    if (this.type === 'http') {
        this.createHttpServer();
    } else {
        logger.error('服务器类型错误! this.type = [ %s ]', this.type);
    }
}

module.exports = Connector;